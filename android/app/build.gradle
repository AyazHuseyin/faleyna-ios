apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

/**
 * React Native config
 */
react {
  autolinkLibrariesWithApp()
}

/** Proguard minify toggle (first releases usually false) */
def enableProguardInReleaseBuilds = false

/** JSC flavor if Hermes disabled */
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

android {
  ndkVersion rootProject.ext.ndkVersion
  buildToolsVersion rootProject.ext.buildToolsVersion
  compileSdk rootProject.ext.compileSdkVersion

  namespace "com.faleyna"

  defaultConfig {
    applicationId "com.faleyna"
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    versionCode 48              // ← Play Console’a yüklerken artır
    versionName "1.1.0"
    missingDimensionStrategy 'store', 'play'
  }

  signingConfigs {
    debug {
      storeFile file('debug.keystore')
      storePassword 'android'
      keyAlias 'androiddebugkey'
      keyPassword 'android'
    }

    // --- RELEASE SIGNING (UPLOAD KEYSTORE) ---
    // Kaynaklar: gradle.properties veya ortam değişkenleri ya da -P ile geçirilen argümanlar
    release {
      // küçük yardımcı: görevin release olup olmadığını anla (clean/assembleDebug patlamasın)
      def isReleaseBuild = gradle.startParameter.taskNames.any { it.toLowerCase().contains("release") }

      // özellikleri hem -P/project properties, hem env’den oku
      def storeFileProp = project.findProperty('MYAPP_UPLOAD_STORE_FILE') ?: System.getenv('MYAPP_UPLOAD_STORE_FILE')
      def aliasProp     = project.findProperty('MYAPP_UPLOAD_KEY_ALIAS') ?: System.getenv('MYAPP_UPLOAD_KEY_ALIAS')
      def storePassProp = project.findProperty('MYAPP_UPLOAD_STORE_PASSWORD') ?: System.getenv('MYAPP_UPLOAD_STORE_PASSWORD')
      def keyPassProp   = project.findProperty('MYAPP_UPLOAD_KEY_PASSWORD') ?: System.getenv('MYAPP_UPLOAD_KEY_PASSWORD')

      // relative/absolute yol farkını çöz
      def resolveKeystoreFile = { p ->
        if (!p) return null
        def f = new File(p)
        return f.isAbsolute() ? f : new File(projectDir, p) // app modülünün kökü
      }

      def resolvedStoreFile = resolveKeystoreFile(storeFileProp)

      if (isReleaseBuild) {
        // Release işlerinde keystore zorunlu
        if (!resolvedStoreFile || !aliasProp || !storePassProp || !keyPassProp) {
          throw new GradleException("Missing keystore props (MYAPP_UPLOAD_*) for release build")
        }
        storeFile resolvedStoreFile
        storePassword storePassProp
        keyAlias aliasProp
        keyPassword keyPassProp
      } else {
        // clean/assembleDebug vs. sırasında imza gerekmiyor; hiçbir şey yapma (patlama)
      }
    }
  }

  buildTypes {
    debug {
      signingConfig signingConfigs.debug
    }
    release {
      // Production imzalama
      signingConfig signingConfigs.release

      // İlk sürümlerde kapalı tutmak genelde daha güvenli
      minifyEnabled enableProguardInReleaseBuilds
      shrinkResources false
      proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
    }
  }
}

dependencies {
  // The version of react-native is set by the React Native Gradle Plugin
  implementation("com.facebook.react:react-android")

  // Google Play Billing (IAP) — manifest'e BILLING iznini otomatik ekler
  implementation "com.android.billingclient:billing-ktx:6.2.1"

  if (hermesEnabled.toBoolean()) {
    implementation("com.facebook.react:hermes-android")
  } else {
    implementation jscFlavor
  }
}

// Fontları kopyala
def fontsSrc = file("../../src/assets/fonts")
def fontsDst = file("$projectDir/src/main/assets/fonts")
tasks.register("copyFonts", Copy) {
  onlyIf { fontsSrc.exists() }
  from fontsSrc
  include("**/*.ttf", "**/*.otf")
  into fontsDst
}
preBuild.dependsOn("copyFonts")
apply plugin: "com.google.gms.google-services"
